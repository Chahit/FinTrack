generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String            @id @default(cuid())
  email     String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  groups    ChatGroupMember[]
  messages  ChatMessage[]
  portfolio Portfolio?
  searches  Search[]
}

model Portfolio {
  id           String        @id @default(cuid())
  userId       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assets       Asset[]
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Asset {
  id            String        @id @default(cuid())
  portfolioId   String
  symbol        String
  quantity      Float
  purchasePrice Float
  type          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  notes         String?
  purchaseDate  DateTime
  portfolio     Portfolio     @relation(fields: [portfolioId], references: [id])
  priceAlerts   PriceAlert[]
  transactions  Transaction[]
}

model Transaction {
  id          String    @id @default(cuid())
  assetId     String
  type        String
  quantity    Float
  price       Float
  date        DateTime
  notes       String?
  createdAt   DateTime  @default(now())
  portfolioId String
  updatedAt   DateTime  @updatedAt
  asset       Asset     @relation(fields: [assetId], references: [id])
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
}

model PriceAlert {
  id        String   @id @default(cuid())
  assetId   String
  type      String
  price     Float
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  asset     Asset    @relation(fields: [assetId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("light")
  currency      String   @default("USD")
  timeZone      String   @default("UTC")
  notifications Json     @default("{\"newsDigest\": true, \"priceAlerts\": true, \"securityAlerts\": true, \"portfolioUpdates\": true}")
  portfolio     Json     @default("{\"autoRefresh\": true, \"showDistribution\": true}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model ChatMessage {
  id        String     @id @default(cuid())
  userId    String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  groupId   String?
  username  String
  group     ChatGroup? @relation(fields: [groupId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([groupId])
}

model ChatGroup {
  id         String            @id @default(cuid())
  name       String
  inviteCode String            @unique
  createdBy  String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  members    ChatGroupMember[]
  messages   ChatMessage[]

  @@index([inviteCode])
}

model ChatGroupMember {
  id       String    @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime  @default(now())
  group    ChatGroup @relation(fields: [groupId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
  @@index([groupId])
}

model Search {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  type      String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([symbol])
  @@index([timestamp])
}

model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  url       String
  source    String
  symbols   String[]
  sentiment String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([symbols])
}
