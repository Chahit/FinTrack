// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // Hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  portfolio Portfolio?
  groups    ChatGroupMember[]
  sessions  Session[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets    Asset[]
}

model Asset {
  id            String   @id @default(cuid())
  symbol        String
  type          String   // 'crypto' or 'stock'
  quantity      Float
  purchasePrice Float
  purchaseDate  DateTime
  notes         String?
  portfolioId   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
}

model Transaction {
  id        String   @id @default(cuid())
  type      String   // 'BUY' or 'SELL'
  quantity  Float
  price     Float
  fees      Float    @default(0)
  date      DateTime
  notes     String?
  assetId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model ChatGroup {
  id         String   @id @default(cuid())
  name       String
  inviteCode String   @unique
  createdBy  String   // Store creator's user ID
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  members    ChatGroupMember[]
}

model ChatGroupMember {
  id        String   @id @default(cuid())
  userId    String
  name      String   // Store member's name for display
  isAdmin   Boolean  @default(false)
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     ChatGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}
