// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  portfolio     Portfolio?
  groups        ChatGroupMember[]
  notifications Notification[]
  settings      UserSettings?
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets    Asset[]
}

model Asset {
  id            String   @id @default(cuid())
  symbol        String
  type          String   // 'crypto' or 'stock'
  quantity      Float
  purchasePrice Float
  purchaseDate  DateTime
  notes         String?
  portfolioId   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  priceAlerts   PriceAlert[]
}

model Transaction {
  id        String   @id @default(cuid())
  type      String   // 'BUY' or 'SELL'
  quantity  Float
  price     Float
  fees      Float    @default(0)
  date      DateTime
  notes     String?
  assetId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model ChatGroup {
  id         String   @id @default(cuid())
  name       String
  inviteCode String   @unique
  createdBy  String   // Store creator's user ID
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  members    ChatGroupMember[]
}

model ChatGroupMember {
  id        String   @id @default(cuid())
  userId    String
  name      String   // Store member's name for display
  isAdmin   Boolean  @default(false)
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     ChatGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'PRICE_ALERT', 'SYSTEM', etc.
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PriceAlert {
  id        String   @id @default(cuid())
  assetId   String
  type      String   // 'ABOVE', 'BELOW'
  price     Float
  triggered Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  theme     String   @default("light")
  currency  String   @default("USD")
  language  String   @default("en")
  notifications Json @default("{}")
  portfolio     Json @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
